// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	config "github.com/nebulaclouds/nebula/nebulapropeller/pkg/controller/config"

	core "github.com/nebulaclouds/nebula/nebulaidl/gen/pb-go/nebulaidl/core"

	event "github.com/nebulaclouds/nebula/nebulaidl/gen/pb-go/nebulaidl/event"

	interfaces "github.com/nebulaclouds/nebula/nebulapropeller/pkg/controller/nodes/interfaces"

	mock "github.com/stretchr/testify/mock"
)

// arrayEventRecorder is an autogenerated mock type for the arrayEventRecorder type
type arrayEventRecorder struct {
	mock.Mock
}

type arrayEventRecorder_RecordNodeEvent struct {
	*mock.Call
}

func (_m arrayEventRecorder_RecordNodeEvent) Return(_a0 error) *arrayEventRecorder_RecordNodeEvent {
	return &arrayEventRecorder_RecordNodeEvent{Call: _m.Call.Return(_a0)}
}

func (_m *arrayEventRecorder) OnRecordNodeEvent(ctx context.Context, _a1 *event.NodeExecutionEvent, eventConfig *config.EventConfig) *arrayEventRecorder_RecordNodeEvent {
	c_call := _m.On("RecordNodeEvent", ctx, _a1, eventConfig)
	return &arrayEventRecorder_RecordNodeEvent{Call: c_call}
}

func (_m *arrayEventRecorder) OnRecordNodeEventMatch(matchers ...interface{}) *arrayEventRecorder_RecordNodeEvent {
	c_call := _m.On("RecordNodeEvent", matchers...)
	return &arrayEventRecorder_RecordNodeEvent{Call: c_call}
}

// RecordNodeEvent provides a mock function with given fields: ctx, _a1, eventConfig
func (_m *arrayEventRecorder) RecordNodeEvent(ctx context.Context, _a1 *event.NodeExecutionEvent, eventConfig *config.EventConfig) error {
	ret := _m.Called(ctx, _a1, eventConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *event.NodeExecutionEvent, *config.EventConfig) error); ok {
		r0 = rf(ctx, _a1, eventConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type arrayEventRecorder_RecordTaskEvent struct {
	*mock.Call
}

func (_m arrayEventRecorder_RecordTaskEvent) Return(_a0 error) *arrayEventRecorder_RecordTaskEvent {
	return &arrayEventRecorder_RecordTaskEvent{Call: _m.Call.Return(_a0)}
}

func (_m *arrayEventRecorder) OnRecordTaskEvent(ctx context.Context, _a1 *event.TaskExecutionEvent, eventConfig *config.EventConfig) *arrayEventRecorder_RecordTaskEvent {
	c_call := _m.On("RecordTaskEvent", ctx, _a1, eventConfig)
	return &arrayEventRecorder_RecordTaskEvent{Call: c_call}
}

func (_m *arrayEventRecorder) OnRecordTaskEventMatch(matchers ...interface{}) *arrayEventRecorder_RecordTaskEvent {
	c_call := _m.On("RecordTaskEvent", matchers...)
	return &arrayEventRecorder_RecordTaskEvent{Call: c_call}
}

// RecordTaskEvent provides a mock function with given fields: ctx, _a1, eventConfig
func (_m *arrayEventRecorder) RecordTaskEvent(ctx context.Context, _a1 *event.TaskExecutionEvent, eventConfig *config.EventConfig) error {
	ret := _m.Called(ctx, _a1, eventConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *event.TaskExecutionEvent, *config.EventConfig) error); ok {
		r0 = rf(ctx, _a1, eventConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type arrayEventRecorder_finalize struct {
	*mock.Call
}

func (_m arrayEventRecorder_finalize) Return(_a0 error) *arrayEventRecorder_finalize {
	return &arrayEventRecorder_finalize{Call: _m.Call.Return(_a0)}
}

func (_m *arrayEventRecorder) Onfinalize(ctx context.Context, nCtx interfaces.NodeExecutionContext, taskPhase core.TaskExecution_Phase, taskPhaseVersion uint32, eventConfig *config.EventConfig) *arrayEventRecorder_finalize {
	c_call := _m.On("finalize", ctx, nCtx, taskPhase, taskPhaseVersion, eventConfig)
	return &arrayEventRecorder_finalize{Call: c_call}
}

func (_m *arrayEventRecorder) OnfinalizeMatch(matchers ...interface{}) *arrayEventRecorder_finalize {
	c_call := _m.On("finalize", matchers...)
	return &arrayEventRecorder_finalize{Call: c_call}
}

// finalize provides a mock function with given fields: ctx, nCtx, taskPhase, taskPhaseVersion, eventConfig
func (_m *arrayEventRecorder) finalize(ctx context.Context, nCtx interfaces.NodeExecutionContext, taskPhase core.TaskExecution_Phase, taskPhaseVersion uint32, eventConfig *config.EventConfig) error {
	ret := _m.Called(ctx, nCtx, taskPhase, taskPhaseVersion, eventConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.NodeExecutionContext, core.TaskExecution_Phase, uint32, *config.EventConfig) error); ok {
		r0 = rf(ctx, nCtx, taskPhase, taskPhaseVersion, eventConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type arrayEventRecorder_finalizeRequired struct {
	*mock.Call
}

func (_m arrayEventRecorder_finalizeRequired) Return(_a0 bool) *arrayEventRecorder_finalizeRequired {
	return &arrayEventRecorder_finalizeRequired{Call: _m.Call.Return(_a0)}
}

func (_m *arrayEventRecorder) OnfinalizeRequired(ctx context.Context) *arrayEventRecorder_finalizeRequired {
	c_call := _m.On("finalizeRequired", ctx)
	return &arrayEventRecorder_finalizeRequired{Call: c_call}
}

func (_m *arrayEventRecorder) OnfinalizeRequiredMatch(matchers ...interface{}) *arrayEventRecorder_finalizeRequired {
	c_call := _m.On("finalizeRequired", matchers...)
	return &arrayEventRecorder_finalizeRequired{Call: c_call}
}

// finalizeRequired provides a mock function with given fields: ctx
func (_m *arrayEventRecorder) finalizeRequired(ctx context.Context) bool {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// process provides a mock function with given fields: ctx, nCtx, index, retryAttempt
func (_m *arrayEventRecorder) process(ctx context.Context, nCtx interfaces.NodeExecutionContext, index int, retryAttempt uint32) {
	_m.Called(ctx, nCtx, index, retryAttempt)
}
