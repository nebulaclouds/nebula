// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/nebulaclouds/nebula/nebulapropeller/pkg/apis/nebulaworkflow/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NebulaWorkflowLister helps list NebulaWorkflows.
// All objects returned here must be treated as read-only.
type NebulaWorkflowLister interface {
	// List lists all NebulaWorkflows in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NebulaWorkflow, err error)
	// NebulaWorkflows returns an object that can list and get NebulaWorkflows.
	NebulaWorkflows(namespace string) NebulaWorkflowNamespaceLister
	NebulaWorkflowListerExpansion
}

// nebulaWorkflowLister implements the NebulaWorkflowLister interface.
type nebulaWorkflowLister struct {
	indexer cache.Indexer
}

// NewNebulaWorkflowLister returns a new NebulaWorkflowLister.
func NewNebulaWorkflowLister(indexer cache.Indexer) NebulaWorkflowLister {
	return &nebulaWorkflowLister{indexer: indexer}
}

// List lists all NebulaWorkflows in the indexer.
func (s *nebulaWorkflowLister) List(selector labels.Selector) (ret []*v1alpha1.NebulaWorkflow, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NebulaWorkflow))
	})
	return ret, err
}

// NebulaWorkflows returns an object that can list and get NebulaWorkflows.
func (s *nebulaWorkflowLister) NebulaWorkflows(namespace string) NebulaWorkflowNamespaceLister {
	return nebulaWorkflowNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NebulaWorkflowNamespaceLister helps list and get NebulaWorkflows.
// All objects returned here must be treated as read-only.
type NebulaWorkflowNamespaceLister interface {
	// List lists all NebulaWorkflows in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NebulaWorkflow, err error)
	// Get retrieves the NebulaWorkflow from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NebulaWorkflow, error)
	NebulaWorkflowNamespaceListerExpansion
}

// nebulaWorkflowNamespaceLister implements the NebulaWorkflowNamespaceLister
// interface.
type nebulaWorkflowNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NebulaWorkflows in the indexer for a given namespace.
func (s nebulaWorkflowNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NebulaWorkflow, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NebulaWorkflow))
	})
	return ret, err
}

// Get retrieves the NebulaWorkflow from the indexer for a given namespace and name.
func (s nebulaWorkflowNamespaceLister) Get(name string) (*v1alpha1.NebulaWorkflow, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nebulaworkflow"), name)
	}
	return obj.(*v1alpha1.NebulaWorkflow), nil
}
