// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/nebulaclouds/nebula/nebulaidl/gen/pb-go/nebulaidl/admin"

	mock "github.com/stretchr/testify/mock"
)

// NebulaAdminDataProvider is an autogenerated mock type for the NebulaAdminDataProvider type
type NebulaAdminDataProvider struct {
	mock.Mock
}

type NebulaAdminDataProvider_GetClusterResourceAttributes struct {
	*mock.Call
}

func (_m NebulaAdminDataProvider_GetClusterResourceAttributes) Return(_a0 *admin.ClusterResourceAttributes, _a1 error) *NebulaAdminDataProvider_GetClusterResourceAttributes {
	return &NebulaAdminDataProvider_GetClusterResourceAttributes{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *NebulaAdminDataProvider) OnGetClusterResourceAttributes(ctx context.Context, project string, domain string) *NebulaAdminDataProvider_GetClusterResourceAttributes {
	c_call := _m.On("GetClusterResourceAttributes", ctx, project, domain)
	return &NebulaAdminDataProvider_GetClusterResourceAttributes{Call: c_call}
}

func (_m *NebulaAdminDataProvider) OnGetClusterResourceAttributesMatch(matchers ...interface{}) *NebulaAdminDataProvider_GetClusterResourceAttributes {
	c_call := _m.On("GetClusterResourceAttributes", matchers...)
	return &NebulaAdminDataProvider_GetClusterResourceAttributes{Call: c_call}
}

// GetClusterResourceAttributes provides a mock function with given fields: ctx, project, domain
func (_m *NebulaAdminDataProvider) GetClusterResourceAttributes(ctx context.Context, project string, domain string) (*admin.ClusterResourceAttributes, error) {
	ret := _m.Called(ctx, project, domain)

	var r0 *admin.ClusterResourceAttributes
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *admin.ClusterResourceAttributes); ok {
		r0 = rf(ctx, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ClusterResourceAttributes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NebulaAdminDataProvider_GetProjects struct {
	*mock.Call
}

func (_m NebulaAdminDataProvider_GetProjects) Return(_a0 *admin.Projects, _a1 error) *NebulaAdminDataProvider_GetProjects {
	return &NebulaAdminDataProvider_GetProjects{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *NebulaAdminDataProvider) OnGetProjects(ctx context.Context) *NebulaAdminDataProvider_GetProjects {
	c_call := _m.On("GetProjects", ctx)
	return &NebulaAdminDataProvider_GetProjects{Call: c_call}
}

func (_m *NebulaAdminDataProvider) OnGetProjectsMatch(matchers ...interface{}) *NebulaAdminDataProvider_GetProjects {
	c_call := _m.On("GetProjects", matchers...)
	return &NebulaAdminDataProvider_GetProjects{Call: c_call}
}

// GetProjects provides a mock function with given fields: ctx
func (_m *NebulaAdminDataProvider) GetProjects(ctx context.Context) (*admin.Projects, error) {
	ret := _m.Called(ctx)

	var r0 *admin.Projects
	if rf, ok := ret.Get(0).(func(context.Context) *admin.Projects); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Projects)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
