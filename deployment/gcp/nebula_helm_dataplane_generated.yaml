---
# Source: nebula-core/templates/admin/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nebulaadmin
  namespace: nebula
  labels: 
    app.kubernetes.io/name: nebulaadmin
    app.kubernetes.io/instance: nebula
    helm.sh/chart: nebula-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
  annotations: 
    iam.gke.io/gcp-service-account: gsa-nebulaadmin@<PROJECT-ID>.iam.gserviceaccount.com
---
# Source: nebula-core/templates/propeller/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nebulapropeller
  namespace: nebula
  labels: 
    app.kubernetes.io/name: nebulapropeller
    app.kubernetes.io/instance: nebula
    helm.sh/chart: nebula-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
  annotations: 
    iam.gke.io/gcp-service-account: gsa-nebulapropeller@<PROJECT-ID>.iam.gserviceaccount.com
---
# Source: nebula-core/templates/propeller/webhook.yaml
# Create a Service Account for webhook
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nebula-pod-webhook
  namespace: nebula
---
# Source: nebula-core/templates/common/secret-auth.yaml
apiVersion: v1
kind: Secret
metadata:
  name: nebula-secret-auth
  namespace: nebula
type: Opaque
stringData:
  client_secret: foobar
---
# Source: nebula-core/templates/common/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: db-pass
stringData:
  pass.txt: '<DBPASSWORD>'
type: Opaque
---
# Source: nebula-core/templates/propeller/webhook.yaml
# Create an empty secret that the first propeller pod will populate
apiVersion: v1
kind: Secret
metadata:
  name: nebula-pod-webhook
  namespace: nebula
type: Opaque
---
# Source: nebula-core/templates/propeller/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nebula-propeller-config
  namespace: nebula
  labels: 
    app.kubernetes.io/name: nebulaadmin
    app.kubernetes.io/instance: nebula
    helm.sh/chart: nebula-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  admin.yaml: | 
    admin:
      clientId: 'nebulapropeller'
      clientSecretLocation: /etc/secrets/client_secret
      endpoint: nebulaadmin:81
      insecure: true
    event:
      capacity: 1000
      rate: 500
      type: admin
  catalog.yaml: | 
    catalog-cache:
      endpoint: datacatalog:89
      insecure: true
      type: datacatalog
  copilot.yaml: | 
    plugins:
      k8s:
        co-pilot:
          image: cr.nebula.org/nebulaclouds/nebulacopilot:v1.10.6
          name: nebula-copilot-
          start-timeout: 30s
  core.yaml: | 
    manager:
      pod-application: nebulapropeller
      pod-template-container-name: nebulapropeller
      pod-template-name: nebulapropeller-template
    propeller:
      downstream-eval-duration: 30s
      enable-admin-launcher: true
      gc-interval: 12h
      kube-client-config:
        burst: 25
        qps: 100
        timeout: 30s
      leader-election:
        enabled: true
        lease-duration: 15s
        lock-config-map:
          name: propeller-leader
          namespace: nebula
        renew-deadline: 10s
        retry-period: 2s
      limit-namespace: all
      max-workflow-retries: 50
      metadata-prefix: metadata/propeller
      metrics-prefix: nebula
      prof-port: 10254
      queue:
        batch-size: -1
        batching-interval: 2s
        queue:
          base-delay: 5s
          capacity: 1000
          max-delay: 120s
          rate: 100
          type: maxof
        sub-queue:
          capacity: 1000
          rate: 100
          type: bucket
        type: batch
      rawoutput-prefix: gs://<BUCKETNAME>/
      workers: 40
      workflow-reeval-duration: 30s
    webhook:
      certDir: /etc/webhook/certs
      serviceName: nebula-pod-webhook
  enabled_plugins.yaml: | 
    tasks:
      task-plugins:
        default-for-task-types:
          container: container
          container_array: k8s-array
          sidecar: sidecar
        enabled-plugins:
        - container
        - sidecar
        - k8s-array
  k8s.yaml: | 
    plugins:
      k8s:
        default-cpus: 100m
        default-env-vars: []
        default-memory: 100Mi
  resource_manager.yaml: | 
    propeller:
      resourcemanager:
        type: noop
  storage.yaml: | 
    storage:
      type: stow
      stow:
        kind: google
        config:
          json: ""
          project_id: <PROJECT-ID>
          scopes: https://www.googleapis.com/auth/cloud-platform
      container: "<BUCKETNAME>"
      enable-multicontainer: false
      limits:
        maxDownloadMBs: 10
  cache.yaml: |
    cache:
      max_size_mbs: 1024
      target_gc_percent: 70
  task_logs.yaml: | 
    plugins:
      k8s-array:
        logs:
          config:
            stackdriver-enabled: true
            stackdriver-logresourcename: k8s_container
      logs:
        cloudwatch-enabled: false
        kubernetes-enabled: false
        stackdriver-enabled: true
        stackdriver-logresourcename: k8s_container
---
# Source: nebula-core/templates/propeller/crds/nebulaworkflow.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: nebulaworkflows.nebula.lyft.com
spec:
  group: nebula.lyft.com
  names:
    kind: NebulaWorkflow
    plural: nebulaworkflows
    shortNames:
      - fly
    singular: nebulaworkflow
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          x-kubernetes-preserve-unknown-fields: true
          properties:
---
# Source: nebula-core/templates/admin/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nebula-nebulaadmin
  labels: 
    app.kubernetes.io/name: nebulaadmin
    app.kubernetes.io/instance: nebula
    helm.sh/chart: nebula-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups: 
  - ""
  - nebula.lyft.com
  - rbac.authorization.k8s.io
  resources: 
  - configmaps
  - nebulaworkflows
  - namespaces
  - pods
  - resourcequotas
  - roles
  - rolebindings
  - secrets
  - services
  - serviceaccounts
  - spark-role
  - limitranges
  verbs: 
  - '*'
---
# Source: nebula-core/templates/propeller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nebula-nebulapropeller
  labels: 
    app.kubernetes.io/name: nebulapropeller
    app.kubernetes.io/instance: nebula
    helm.sh/chart: nebula-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
rules:
# Allow RO access to PODS
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
# Allow Event recording access
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - delete
  - patch
# Allow Access All plugin objects
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
# Allow Access to CRD
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
# Allow Access to all resources under nebula.lyft.com
- apiGroups:
  - nebula.lyft.com
  resources:
  - nebulaworkflows
  - nebulaworkflows/finalizers
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
  - post
  - deletecollection
---
# Source: nebula-core/templates/propeller/webhook.yaml
# Create a ClusterRole for the webhook
# https://kubernetes.io/docs/admin/authorization/rbac/
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nebula-nebula-pod-webhook
  namespace: nebula
rules:
  - apiGroups:
      - "*"
    resources:
      - mutatingwebhookconfigurations
      - secrets
      - pods
      - replicasets/finalizers
    verbs:
      - get
      - create
      - update
      - patch
---
# Source: nebula-core/templates/admin/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nebula-nebulaadmin-binding
  labels: 
    app.kubernetes.io/name: nebulaadmin
    app.kubernetes.io/instance: nebula
    helm.sh/chart: nebula-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nebula-nebulaadmin
subjects:
- kind: ServiceAccount
  name: nebulaadmin
  namespace: nebula
---
# Source: nebula-core/templates/propeller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nebula-nebulapropeller
  labels: 
    app.kubernetes.io/name: nebulapropeller
    app.kubernetes.io/instance: nebula
    helm.sh/chart: nebula-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nebula-nebulapropeller
subjects:
- kind: ServiceAccount
  name: nebulapropeller
  namespace: nebula
---
# Source: nebula-core/templates/propeller/webhook.yaml
# Create a binding from Role -> ServiceAccount
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nebula-nebula-pod-webhook
  namespace: nebula
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nebula-nebula-pod-webhook
subjects:
  - kind: ServiceAccount
    name: nebula-pod-webhook
    namespace: nebula
---
# Source: nebula-core/templates/propeller/webhook.yaml
# Service
apiVersion: v1
kind: Service
metadata:
  name: nebula-pod-webhook
  namespace: nebula
  annotations: 
    projectcontour.io/upstream-protocol.h2c: grpc
spec:
  selector:
    app: nebula-pod-webhook
  ports:
    - name: https
      protocol: TCP
      port: 443
      targetPort: 9443
---
# Source: nebula-core/templates/propeller/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: nebula
  name: nebulapropeller
  labels: 
    app.kubernetes.io/name: nebulapropeller
    app.kubernetes.io/instance: nebula
    helm.sh/chart: nebula-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: nebulapropeller
      app.kubernetes.io/instance: nebula
  template:
    metadata:
      annotations:
        configChecksum: "5cfa27fed34037ee9e992af31d950a82a9abe1e77f10b7bd7f37d2fb6b935e1"
      labels: 
        app.kubernetes.io/name: nebulapropeller
        app.kubernetes.io/instance: nebula
        helm.sh/chart: nebula-core-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        fsGroup: 65534
        runAsUser: 1001
        fsGroupChangePolicy: "Always"
      containers:
      - command:
        - nebulapropeller
        - --config
        - /etc/nebula/config/*.yaml
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: "cr.nebula.org/nebulaclouds/nebulapropeller:v1.10.6"
        imagePullPolicy: "IfNotPresent"
        name: nebulapropeller
        ports:
        - containerPort: 10254
        resources:
          limits:
            cpu: 500m
            ephemeral-storage: 2Gi
            memory: 1Gi
          requests:
            cpu: 50m
            ephemeral-storage: 2Gi
            memory: 1Gi
        volumeMounts:
        - name: config-volume
          mountPath: /etc/nebula/config
        - name: auth
          mountPath: /etc/secrets/
        terminationMessagePolicy: "FallbackToLogsOnError"
      serviceAccountName: nebulapropeller
      volumes:
      - configMap:
          name: nebula-propeller-config
        name: config-volume
      - name: auth
        secret:
          secretName: nebula-secret-auth
      affinity: 
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: nebulapropeller
            topologyKey: kubernetes.io/hostname
---
# Source: nebula-core/templates/propeller/webhook.yaml
# Create the actual deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nebula-pod-webhook
  namespace: nebula
  labels:
    app: nebula-pod-webhook
spec:
  selector:
    matchLabels:
      app: nebula-pod-webhook
  template:
    metadata:
      labels:
        app: nebula-pod-webhook
        app.kubernetes.io/name: nebula-pod-webhook
        app.kubernetes.io/version: v1.10.6
      annotations:
        configChecksum: "5cfa27fed34037ee9e992af31d950a82a9abe1e77f10b7bd7f37d2fb6b935e1"
    spec:
      securityContext:
        fsGroup: 65534
        runAsUser: 1001
        fsGroupChangePolicy: "Always"
      serviceAccountName: nebula-pod-webhook
      initContainers:
      - name: generate-secrets
        image: "cr.nebula.org/nebulaclouds/nebulapropeller:v1.10.6"
        imagePullPolicy: "IfNotPresent"
        command:
          - nebulapropeller
        args:
          - webhook
          - init-certs
          - --config
          - /etc/nebula/config/*.yaml
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        volumeMounts:
          - name: config-volume
            mountPath: /etc/nebula/config
      containers:
        - name: webhook
          image: "cr.nebula.org/nebulaclouds/nebulapropeller:v1.10.6"
          imagePullPolicy: "IfNotPresent"
          command:
            - nebulapropeller
          args:
            - webhook
            - --config
            - /etc/nebula/config/*.yaml
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: config-volume
              mountPath: /etc/nebula/config
              readOnly: true
            - name: webhook-certs
              mountPath: /etc/webhook/certs
              readOnly: true
      volumes:
        - name: config-volume
          configMap:
            name: nebula-propeller-config
        - name: webhook-certs
          secret:
            secretName: nebula-pod-webhook
---
# Source: nebula-core/templates/common/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nebula-core
  namespace: nebula
  annotations: 
    cert-manager.io/issuer: letsencrypt-production
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/app-root: /console
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  rules:
    - http:
        paths:
          # This is useful only for frontend development
          # NOTE: If you change this, you must update the BASE_URL value in nebulaconsole.yaml
          - path: /console
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaconsole
                port:
                  number: 80
          - path: /console/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaconsole
                port:
                  number: 80
          - path: /api
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 80
          - path: /api/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 80
          - path: /healthcheck
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 80
          - path: /v1/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 80
          - path: /.well-known
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 80
          - path: /.well-known/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 80
          - path: /login
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 80
          - path: /login/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 80
          - path: /logout
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 80
          - path: /logout/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 80
          - path: /callback
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 80
          - path: /callback/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 80
          - path: /me
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 80
          - path: /config
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 80
          - path: /config/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 80
          - path: /oauth2
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 80
          - path: /oauth2/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 80
      host: '<HOSTNAME>'
  tls:
    - secretName: nebula-nebula-tls
      hosts:
        - '<HOSTNAME>'
  
# Certain ingress controllers like nginx cannot serve HTTP 1 and GRPC with a single ingress because GRPC can only
# enabled on the ingress object, not on backend services (GRPC annotation is set on the ingress, not on the services).
---
# Source: nebula-core/templates/common/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nebula-core-grpc
  namespace: nebula
  annotations:
    cert-manager.io/issuer: letsencrypt-production
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/app-root: /console
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: GRPC
spec:
  rules:
    - host: '<HOSTNAME>'
      http:
        paths:
          #
          
          # NOTE: Port 81 in nebulaadmin is the GRPC server port for NebulaAdmin.
          - path: /nebulaidl.service.SignalService
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 81
          - path: /nebulaidl.service.SignalService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 81
          - path: /nebulaidl.service.AdminService
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 81
          - path: /nebulaidl.service.AdminService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 81
          - path: /nebulaidl.service.DataProxyService
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 81
          - path: /nebulaidl.service.DataProxyService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 81
          - path: /nebulaidl.service.AuthMetadataService
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 81
          - path: /nebulaidl.service.AuthMetadataService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 81
          - path: /nebulaidl.service.IdentityService
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 81
          - path: /nebulaidl.service.IdentityService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 81
          - path: /grpc.health.v1.Health
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 81
          - path: /grpc.health.v1.Health/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: nebulaadmin
                port:
                  number: 81
  tls:
    - secretName: nebula-nebula-tls
      hosts:
        - '<HOSTNAME>'
