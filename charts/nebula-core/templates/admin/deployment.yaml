{{- if .Values.nebulaadmin.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "nebulaadmin.name" . }}
  namespace: {{ template "nebula.namespace" . }}
  labels: {{ include "nebulaadmin.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.nebulaadmin.replicaCount }}
  selector:
    matchLabels: {{ include "nebulaadmin.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        configChecksum: {{ include (print .Template.BasePath "/admin/configmap.yaml") . | sha256sum | trunc 63 | quote }}
        {{- with .Values.nebulaadmin.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels: {{ include "nebulaadmin.labels" . | nindent 8 }}
    spec:
      securityContext:
        fsGroup: 65534
        runAsUser: 1001
        fsGroupChangePolicy: "Always"
      {{- if .Values.nebulaadmin.priorityClassName }}
      priorityClassName: {{ .Values.nebulaadmin.priorityClassName }}
      {{- end }}
      initContainers:
        - command:
          - nebulaadmin
          - --config
          - {{ .Values.nebulaadmin.configPath }}
          - migrate
          - run
          image: "{{ .Values.nebulaadmin.image.repository }}:{{ .Values.nebulaadmin.image.tag }}"
          imagePullPolicy: "{{ .Values.nebulaadmin.image.pullPolicy }}"
          name: run-migrations
          volumeMounts: {{- include "databaseSecret.volumeMount" . | nindent 10 }}
          - mountPath: /etc/nebula/config
            name: base-config-volume
        {{- if .Values.nebulaadmin.initialProjects }}
        - command:
          - nebulaadmin
          - --config
          - {{ .Values.nebulaadmin.configPath }}
          - migrate
          - seed-projects
          {{- range .Values.nebulaadmin.initialProjects }}
          - {{ . }}
          {{- end }}
          image: "{{ .Values.nebulaadmin.image.repository }}:{{ .Values.nebulaadmin.image.tag }}"
          imagePullPolicy: "{{ .Values.nebulaadmin.image.pullPolicy }}"
          name: seed-projects
          volumeMounts: {{- include "databaseSecret.volumeMount" . | nindent 10 }}
          - mountPath: /etc/nebula/config
            name: base-config-volume
        {{- end }}
        {{- if and (.Values.cluster_resource_manager.enabled) (not .Values.cluster_resource_manager.standalone_deploy) }}
        - command:
          - nebulaadmin
          - --config
          - {{ .Values.nebulaadmin.configPath }}
          - clusterresource
          - sync
          image: "{{ .Values.nebulaadmin.image.repository }}:{{ .Values.nebulaadmin.image.tag }}"
          imagePullPolicy: "{{ .Values.nebulaadmin.image.pullPolicy }}"
          name: sync-cluster-resources
          volumeMounts: {{- include "databaseSecret.volumeMount" . | nindent 10 }}
          - mountPath: /etc/nebula/clusterresource/templates
            name: resource-templates
          - mountPath: /etc/nebula/config
            name: clusters-config-volume
          - mountPath: /etc/secrets/
            name: admin-secrets
          {{- if gt (len .Values.configmap.clusters.labelClusterMap) 0 }}
          {{- with .Values.nebulaadmin.additionalVolumeMounts -}}
          {{ tpl (toYaml .) $ | nindent 10 }}
          {{- end }}
          {{- end }}
        {{- end }}
        - name: generate-secrets
          image: "{{ .Values.nebulaadmin.image.repository }}:{{ .Values.nebulaadmin.image.tag }}"
          imagePullPolicy: "{{ .Values.nebulaadmin.image.pullPolicy }}"
          command: ["/bin/sh", "-c"]
          args:
            [
                "nebulaadmin --config={{ .Values.nebulaadmin.configPath }} secrets init --localPath /etc/scratch/secrets && nebulaadmin --config=/etc/nebula/config/*.yaml secrets create --name nebula-admin-secrets --fromPath /etc/scratch/secrets",
            ]
          volumeMounts:
            - mountPath: /etc/nebula/config
              name: base-config-volume
            - mountPath: /etc/scratch
              name: scratch
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      containers:
      - command:
        - nebulaadmin
        - --config
        - {{ .Values.nebulaadmin.configPath }}
        - serve
        {{- with .Values.nebulaadmin.extraArgs }}
        {{- tpl (toYaml .) $ | nindent 8 }}
        {{- end }}
        {{- if .Values.nebulaadmin.env }}
        env:
        {{- with .Values.nebulaadmin.env -}}
        {{- tpl (toYaml .) $ | nindent 8 }}
        {{- end }}
        {{- end }}
        image: "{{ .Values.nebulaadmin.image.repository }}:{{ .Values.nebulaadmin.image.tag }}"
        imagePullPolicy: "{{ .Values.nebulaadmin.image.pullPolicy }}"
        name: nebulaadmin
        ports:
        - containerPort: 8088
        - containerPort: 8089
        - containerPort: {{ .Values.configmap.adminServer.nebulaadmin.profilerPort }}
        readinessProbe:
          exec:
            command: [ "sh", "-c", "reply=$(curl -s -o /dev/null -w %{http_code} http://127.0.0.1:8088/healthcheck); if [ \"$reply\" -lt 200 -o \"$reply\" -ge 400 ]; then exit 1; fi;","grpc_health_probe", "-addr=:8089"]
          initialDelaySeconds: 15
        livenessProbe:
          exec:
            command: [ "sh", "-c", "reply=$(curl -s -o /dev/null -w %{http_code} http://127.0.0.1:8088/healthcheck); if [ \"$reply\" -lt 200 -o \"$reply\" -ge 400 ]; then exit 1; fi;","grpc_health_probe", "-addr=:8089"]
          initialDelaySeconds: 20
          periodSeconds: 5
        resources: {{- toYaml .Values.nebulaadmin.resources | nindent 10 }}
        volumeMounts: {{- include "databaseSecret.volumeMount" . | nindent 8 }}
        - mountPath: /srv/nebula
          name: shared-data
        - mountPath: /etc/nebula/config
          name: clusters-config-volume
        - mountPath: /etc/secrets/
          name: admin-secrets
        {{- with .Values.nebulaadmin.additionalVolumeMounts -}}
        {{ tpl (toYaml .) $ | nindent 8 }}
        {{- end }}
      {{- with .Values.nebulaadmin.additionalContainers -}}
      {{- tpl (toYaml .) $ | nindent 6}}
      {{- end }}
      serviceAccountName: {{ template "nebulaadmin.name" . }}
      volumes: {{- include "databaseSecret.volume" . | nindent 6 }}
      - emptyDir: {}
        name: shared-data
      - emptyDir: {}
        name: scratch
      - configMap:
          name: nebula-admin-base-config
        name: base-config-volume
      - projected:
          sources:
            - configMap:
                name: nebula-admin-base-config
            - configMap:
                name: nebula-admin-clusters-config
        name: clusters-config-volume
      {{- if .Values.cluster_resource_manager.enabled }}
      - configMap:
          name: clusterresource-template
        name: resource-templates
      {{- end }}
      - name: admin-secrets
        secret:
          secretName: nebula-admin-secrets
      {{- with .Values.nebulaadmin.additionalVolumes -}}
      {{ tpl (toYaml .) $ | nindent 6 }}
      {{- end }}
      {{- with .Values.nebulaadmin.nodeSelector }}
      nodeSelector: {{ tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      {{- with .Values.nebulaadmin.affinity }}
      affinity: {{ tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      {{- with .Values.nebulaadmin.tolerations }}
      tolerations: {{ tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
{{- end }}
