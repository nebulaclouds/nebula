{{- if not (include "nebula-binary.configuration.externalConfiguration" .) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nebula-binary.configuration.configMapName" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "nebula-binary.labels" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- tpl ( .Values.commonLabels | toYaml ) . | nindent 4 }}
    {{- end }}
    {{- if .Values.configuration.labels }}
    {{- tpl ( .Values.configuration.labels | toYaml ) . | nindent 4 }}
    {{- end }}
  annotations:
    {{- if .Values.commonAnnotations }}
    {{- tpl ( .Values.commonAnnotations | toYaml ) . | nindent 4 }}
    {{- end }}
    {{- if .Values.configuration.annotations }}
    {{- tpl ( .Values.configuration.annotations | toYaml ) . | nindent 4 }}
    {{- end }}
data:
  000-core.yaml: |
    admin:
      {{- if .Values.configuration.auth.enabled }}
      clientId: {{ .Values.configuration.auth.internal.clientId }}
      {{- if .Values.configuration.auth.internal.audience }}
      audience: {{ .Values.configuration.auth.internal.audience }}
      {{- end }}
      {{- end }}
      endpoint: localhost:8089
      insecure: true
    catalog-cache:
      endpoint: localhost:8081
      insecure: true
      type: datacatalog
    cluster_resources:
      standaloneDeployment: false
      templatePath: /etc/nebula/cluster-resource-templates
    logger:
      show-source: true
      level: {{ default 1 .Values.configuration.logging.level }}
    propeller:
      create-nebulaworkflow-crd: true
    webhook:
      certDir: /var/run/nebula/certs
      localCert: true
      secretName: {{ include "nebula-binary.webhook.secretName" . }}
      serviceName: {{ include "nebula-binary.webhook.serviceName" . }}
      servicePort: 443
    nebula:{{ tpl ( index .Values "nebula-core-components" | toYaml ) . | nindent 6 }}
  001-plugins.yaml: |
    tasks:
      {{- .Values.enabled_plugins.tasks | toYaml | nindent 6 }}
    plugins:
      logs: {{- include "nebula-binary.configuration.logging.plugins" . | nindent 8 }}
      k8s:
        co-pilot:
          {{- with ( index .Values.configuration "co-pilot" ).image }}
          image: {{ printf "%s:%s" .repository .tag | quote }}
          {{- end }}
      k8s-array:
        logs:
          config: {{- include "nebula-binary.configuration.logging.plugins" . | nindent 12 }}
      {{- if .Values.configuration.agentService }}
      agent-service:
      {{- tpl ( .Values.configuration.agentService | toYaml ) . | nindent 8 }}
      {{- else if .Values.nebulaagent.enabled }}
      agent-service:
        defaultAgent:
          endpoint: {{ include "nebulaagent.name" . }}:{{ include "nebulaagent.servicePort" . }}
          insecure: true
        supportedTaskTypes:
        - bigquery_query_job_task
      {{- end }}
  002-database.yaml: |
    {{- with .Values.configuration.database }}
    database:
      postgres:
        username: {{ .username }}
        host: {{ tpl .host $ }}
        port: {{ .port }}
        dbname: {{ .dbname }}
        options: {{ .options | quote }}
        {{- if .passwordPath }}
        passwordPath: {{ .passwordPath }}
        {{- end }}
    {{- end }}
  003-storage.yaml: |
    propeller:
      rawoutput-prefix: {{ include "nebula-binary.configuration.storage.userDataPrefix" . }}
    {{- with .Values.configuration.storage }}
    storage:
      type: stow
      stow:
        {{- if eq "s3" .provider }}
        {{- with .providerConfig.s3 }}
        kind: s3
        config:
          region: {{ required "Region required for S3 storage provider" .region }}
          disable_ssl: {{ .disableSSL }}
          v2_signing: {{ .v2Signing }}
          {{- if .endpoint }}
          endpoint: {{ tpl .endpoint $ }}
          {{- end }}
          {{- if eq "iam" .authType }}
          auth_type: iam
          {{- else if eq "accesskey" .authType }}
          auth_type: accesskey
          {{- else }}
          {{- printf "Invalid value for S3 storage provider authentication type. Expected one of (iam, accesskey), but got: %s" .authType | fail }}
          {{- end }}
        {{- end }}
        {{- else if eq "azure" .provider }}
        {{- with .providerConfig.azure }}
        kind: azure
        config:
          account: {{ .account }}
          {{- if .key }}
          key: {{ .key }}
          {{- end }}
          {{- if .configDomainSuffix }}
          configDomainSuffix: {{ .configDomainSuffix }}
          {{- end }}
          {{- if .configUploadConcurrency }}
          configUploadConcurrency: {{ .configUploadConcurrency }}
          {{- end }}
        {{- end }}
        {{- else if eq "gcs" .provider }}
        kind: google
        config:
          json: ""
          project_id: {{ required "GCP project required for GCS storage provider" .providerConfig.gcs.project }}
          scopes: https://www.googleapis.com/auth/cloud-platform
        {{- else }}
        {{- printf "Invalid value for storage provider. Expected one of (s3, gcs), but got: %s" .provider | fail }}
        {{- end }}
      container: {{ required "Metadata container required" .metadataContainer }}
    {{- end }}
  {{- if .Values.configuration.auth.enabled }}
  004-auth.yaml: |
    auth:
      appAuth:
        {{- if .Values.configuration.auth.enableAuthServer }}
        selfAuthServer:
          staticClients:
            nebulapropeller:
              grant_types:
              - refresh_token
              - client_credentials
              id: nebulapropeller
              response_types:
              - token
              scopes:
              - all
              - offline
              - access_token
            nebula-cli:
              grant_types:
              - refresh_token
              - authorization_code
              id: nebula-cli
              public: true
              redirect_uris:
              - http://localhost:53593/callback
              - http://localhost:12345/callback
              response_types:
              - code
              - token
              scopes:
              - all
              - offline
              - access_token
            nebulactl:
              grant_types:
              - refresh_token
              - authorization_code
              id: nebulactl
              public: true
              redirect_uris:
              - http://localhost:53593/callback
              - http://localhost:12345/callback
              response_types:
              - code
              - token
              scopes:
              - all
              - offline
              - access_token
        {{- end }}
        thirdPartyConfig:
          nebulaClient: {{ .Values.configuration.auth.nebulaClient | toYaml | nindent 12 }}
      authorizedUris:
      {{- if .Values.configuration.auth.authorizedUris }}
      {{- tpl ( .Values.configuration.auth.authorizedUris | toYaml ) . | nindent 6 }}
      {{- end }}
      - http://{{ include "nebula-binary.fullname" . }}:{{ include "nebula-binary.service.http.port" . }}
      - http://{{ include "nebula-binary.fullname" . }}.{{ .Release.Namespace }}:{{ include "nebula-binary.service.http.port" . }}
      - http://{{ include "nebula-binary.fullname" . }}.{{ .Release.Namespace }}.svc:{{ include "nebula-binary.service.http.port" . }}
      - http://{{ include "nebula-binary.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ include "nebula-binary.service.http.port" . }}
      userAuth:
        openId:
          baseUrl: {{ required "OIDC base URL required when authentication is enabled" .Values.configuration.auth.oidc.baseUrl | quote }}
          clientId: {{ required "OIDC client ID required when authentication is enabled" .Values.configuration.auth.oidc.clientId | quote }}
          scopes:
          - profile
          - openid
    server:
      security:
        useAuth: true
  {{- end }}
  {{- if .Values.configuration.inline }}
  100-inline-config.yaml: |
    {{- tpl ( .Values.configuration.inline | toYaml ) . | nindent 4 }}
  {{- end }}
{{- end }}
