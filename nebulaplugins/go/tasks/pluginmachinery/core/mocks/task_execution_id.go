// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	nebulaidlcore "github.com/nebulaclouds/nebula/nebulaidl/gen/pb-go/nebulaidl/core"
	mock "github.com/stretchr/testify/mock"
)

// TaskExecutionID is an autogenerated mock type for the TaskExecutionID type
type TaskExecutionID struct {
	mock.Mock
}

type TaskExecutionID_GetGeneratedName struct {
	*mock.Call
}

func (_m TaskExecutionID_GetGeneratedName) Return(_a0 string) *TaskExecutionID_GetGeneratedName {
	return &TaskExecutionID_GetGeneratedName{Call: _m.Call.Return(_a0)}
}

func (_m *TaskExecutionID) OnGetGeneratedName() *TaskExecutionID_GetGeneratedName {
	c_call := _m.On("GetGeneratedName")
	return &TaskExecutionID_GetGeneratedName{Call: c_call}
}

func (_m *TaskExecutionID) OnGetGeneratedNameMatch(matchers ...interface{}) *TaskExecutionID_GetGeneratedName {
	c_call := _m.On("GetGeneratedName", matchers...)
	return &TaskExecutionID_GetGeneratedName{Call: c_call}
}

// GetGeneratedName provides a mock function with given fields:
func (_m *TaskExecutionID) GetGeneratedName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type TaskExecutionID_GetGeneratedNameWith struct {
	*mock.Call
}

func (_m TaskExecutionID_GetGeneratedNameWith) Return(_a0 string, _a1 error) *TaskExecutionID_GetGeneratedNameWith {
	return &TaskExecutionID_GetGeneratedNameWith{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *TaskExecutionID) OnGetGeneratedNameWith(minLength int, maxLength int) *TaskExecutionID_GetGeneratedNameWith {
	c_call := _m.On("GetGeneratedNameWith", minLength, maxLength)
	return &TaskExecutionID_GetGeneratedNameWith{Call: c_call}
}

func (_m *TaskExecutionID) OnGetGeneratedNameWithMatch(matchers ...interface{}) *TaskExecutionID_GetGeneratedNameWith {
	c_call := _m.On("GetGeneratedNameWith", matchers...)
	return &TaskExecutionID_GetGeneratedNameWith{Call: c_call}
}

// GetGeneratedNameWith provides a mock function with given fields: minLength, maxLength
func (_m *TaskExecutionID) GetGeneratedNameWith(minLength int, maxLength int) (string, error) {
	ret := _m.Called(minLength, maxLength)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, int) string); ok {
		r0 = rf(minLength, maxLength)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(minLength, maxLength)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type TaskExecutionID_GetID struct {
	*mock.Call
}

func (_m TaskExecutionID_GetID) Return(_a0 nebulaidlcore.TaskExecutionIdentifier) *TaskExecutionID_GetID {
	return &TaskExecutionID_GetID{Call: _m.Call.Return(_a0)}
}

func (_m *TaskExecutionID) OnGetID() *TaskExecutionID_GetID {
	c_call := _m.On("GetID")
	return &TaskExecutionID_GetID{Call: c_call}
}

func (_m *TaskExecutionID) OnGetIDMatch(matchers ...interface{}) *TaskExecutionID_GetID {
	c_call := _m.On("GetID", matchers...)
	return &TaskExecutionID_GetID{Call: c_call}
}

// GetID provides a mock function with given fields:
func (_m *TaskExecutionID) GetID() nebulaidlcore.TaskExecutionIdentifier {
	ret := _m.Called()

	var r0 nebulaidlcore.TaskExecutionIdentifier
	if rf, ok := ret.Get(0).(func() nebulaidlcore.TaskExecutionIdentifier); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(nebulaidlcore.TaskExecutionIdentifier)
	}

	return r0
}

type TaskExecutionID_GetUniqueNodeID struct {
	*mock.Call
}

func (_m TaskExecutionID_GetUniqueNodeID) Return(_a0 string) *TaskExecutionID_GetUniqueNodeID {
	return &TaskExecutionID_GetUniqueNodeID{Call: _m.Call.Return(_a0)}
}

func (_m *TaskExecutionID) OnGetUniqueNodeID() *TaskExecutionID_GetUniqueNodeID {
	c_call := _m.On("GetUniqueNodeID")
	return &TaskExecutionID_GetUniqueNodeID{Call: c_call}
}

func (_m *TaskExecutionID) OnGetUniqueNodeIDMatch(matchers ...interface{}) *TaskExecutionID_GetUniqueNodeID {
	c_call := _m.On("GetUniqueNodeID", matchers...)
	return &TaskExecutionID_GetUniqueNodeID{Call: c_call}
}

// GetUniqueNodeID provides a mock function with given fields:
func (_m *TaskExecutionID) GetUniqueNodeID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
